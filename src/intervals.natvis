<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="intervals::set&lt;*,*&gt;">
        <Expand>
            <CustomListItems>
                <Variable Name="i" InitialValue="0" />
                <Loop>
                    <Break Condition="i == num_values" />
                    <Item Name="[{ i }]" Condition="state_[i] != 0">values[i]</Item>
                    <Exec>++i</Exec>
                </Loop>
            </CustomListItems>
        </Expand>
    </Type>
    <Type Name="intervals::interval&lt;*&gt;">
        <DisplayString Condition="lower_ &gt; upper_">uninitialized</DisplayString>
        <DisplayString Condition="lower_ == upper_">{ lower_,g }</DisplayString>
        <DisplayString>[{ lower_,g }, { upper_,g }]</DisplayString>
    </Type>
    <Type Name="intervals::detail::ordering_constraint_lr&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } ≤ { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } ≤ { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::ordering_constraint_rl&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } ≤ { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } ≤ { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::ordering_constraint_ll&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } ≤ { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } ≤ { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::equality_constraint_lr&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } = { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } = { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::equality_constraint_ll&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } = { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } = { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::inequality_constraint_lr&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } ≠ { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } ≠ { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::inequality_constraint_ll&lt;*&gt;">
        <DisplayString IncludeView="member">{ lhs_ } ≠ { rhs_ }</DisplayString>
        <DisplayString>{ lhs_ } ≠ { rhs_ }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::constraint_conjunction&lt;*,*&gt;">
        <DisplayString IncludeView="member">{ lhs_,view(member) } ∧ { rhs_,view(member) }</DisplayString>
        <DisplayString>{ lhs_,view(member) } ∧ { rhs_,view(member) }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>
    <Type Name="intervals::detail::constraint_disjunction&lt;*,*&gt;">
        <DisplayString IncludeView="member">{ lhs_,view(member) } ∨ { rhs_,view(member) }</DisplayString>
        <DisplayString>{ lhs_,view(member) } ∨ { rhs_,view(member) }: { *(intervals::set&lt;bool,makeshift::detail::reflector&gt;*) this }</DisplayString>
        <Expand>
            <Item Name="lhs">lhs_</Item>
            <Item Name="rhs">rhs_</Item>
        </Expand>
    </Type>

</AutoVisualizer>
